[gd_scene load_steps=2 format=3 uid="uid://bbr6u2kefuco4"]

[sub_resource type="GDScript" id="GDScript_l8f1h"]
script/source = "extends Control

func _ready() -> void:
	var st := {
		counter = 0
	}
	var addons := []
	#var addon_nodes := []
	var addon_panel = GDX.render(func(update): return(
		[MarginContainer, [
			[PanelContainer, [
				[VBoxContainer, [
					[CheckBox, {
						text = \"All\",
						on_toggled = func(val):
							for a in addons:
								a.checked = val
								update.call()
							pass,
					}],
					[ScrollContainer, {
						custom_minimum_size = Vector2(200, 200),
						horizontal_scroll_mode = ScrollContainer.SCROLL_MODE_DISABLED
					}, [
						[MarginContainer, [
							[Panel, func(it: Panel): it.set_anchors_and_offsets_preset(Control.PRESET_FULL_RECT)],
							[VBoxContainer, [
								addons.map(func(a): return [
									[HBoxContainer, {
										name = a.name
									}, [
										[CheckBox, {
											text = a.text,
											button_pressed = a.checked,
											on_toggled = func(val):
												a.checked = val
												update.call(),
										}],
										[LineEdit, {
											expand_to_text_length = true,
											text = a.text,
											on_text_changed = func(t):
												a.text = t
												update.call()
												pass,
										}],
										[Button, {
											text = \"Delete\",
											on_pressed = func():
												addons.erase(a)
												update.call()
												pass,
										}]
									]]
								])
							]]
						]],
					]],
					[HBoxContainer, [
						[Button, {
							text = \"Cancel\",
							on_pressed = func():
								addons.push_back({
									name = str(Time.get_ticks_usec() + randf()),
									checked = false,
									text = \"Empty\",
								})
								update.call(),
						}],
						[Button, {
							text = \"(Re)import\"
						}]
					]]
				]]
			]]
		]]
	))
	
	add_child(
	GDX.render(func(update): return (
		[VBoxContainer, [
				[CheckBox, {
					text = \"(All)\",
					on_toggled = func(v):
						for a in addons:
							a.checked = v
						update.call()
						pass,
				}],
				[ScrollContainer, {
					custom_minimum_size = Vector2(200, 200),
					horizontal_scroll_mode = ScrollContainer.SCROLL_MODE_DISABLED
				}, [
					
					[MarginContainer, {
						size_flags_vertical = Control.SIZE_EXPAND_FILL,
						size_flags_horizontal = Control.SIZE_EXPAND_FILL,
					}, func(it: MarginContainer):
						it.add_theme_constant_override(\"margin_left\", 8)
						pass,
					[
						[Panel],
						[VBoxContainer, [
							addons.map(func(a): return (
								[CheckBox, {
									text = a.text,
									button_pressed = a.checked,
									on_toggled = func(v):
										a.checked = v
										update.call()
										pass,
								}]
							))
						]]
					]]
				]],
				[HBoxContainer, [
					[Button, {
						text = \"Cancel\",
					}],
					[Button, {
						text = \"(Re)import\",
						#on_pressed = func():
							#popup.hide()
							#pass,
					}]
				]]
			]]
	))
	)
	pass
"

[node name="Node" type="Control"]
layout_mode = 3
anchors_preset = 0
script = SubResource("GDScript_l8f1h")
